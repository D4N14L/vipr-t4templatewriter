<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
OdcmClass entity        = host.CurrentType.AsOdcmClass();
var entityName          = entity.Name.ToUpperFirstChar();
var entityRequest       = entityName + "Request";
var entityBuilder       = entityName + "RequestBuilder";
var jsonContentType     = "application/json";
#>
<#=writer.WriteHeader()#>

from .<#=entityRequest.ToUnderscore()#> import <#=entityRequest#>
from ..request_builder_base import RequestBuilderBase
<#
foreach (var method in entity.Methods){
    var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1);
    var baseName = method.Class.Name.ToUpperFirstChar() + methodName.ToUpperFirstChar();
#>
from ..Requests.<#=baseName.ToUnderscore()#> import <#=baseName#>RequestBuilder
<#
}
foreach(var prop in entity.StreamProperties())
    {
        var propName = prop.Class.Name.ToUpperFirstChar()+prop.Name.ToUpperFirstChar();
        var propRequestBuilder = propName+"RequestBuilder";
#>
from ..Requests.<#=propName.ToUnderscore()#> import <#=propRequestBuilder#>
<#
    }
#>

class <#=entityBuilder#>(RequestBuilderBase):

    def __init__(self, request_url, client):
        super(<#=entityBuilder#>, self).__init__(request_url, client)

    def request(self, options=None):
        """
        Builds the <#=entityRequest#>
        :param options: List of options to include in the request
        :type options: List of type Options
        :returns: The request
        :rtype: <#=entityRequest#>
        """
        return <#=entityRequest#>(self.request_url, self.client, options)

<#  foreach(var child in entity.Derived)
    {
        var childName = child.Name.ToUnderscore();
        var childNameBuilder = child.Name.ToUpperFirstChar() + "RequestBuilder";
#>
    @property
    def <#=childName#>(self):
        """
        The <#=childName#> for the <#=entityBuilder#>
        :returns: A request builder created from the <#=entityBuilder#>
        :rtype: <#=childNameBuilder#>
        """
        return <#=childNameBuilder#>(self.append_to_request_url("<#=child.Name#>"), self.client)

<#
    }

    foreach(var prop in entity.NavigationProperties()){

        var propName = prop.Name.ToUnderscore();
        var propRequestBuilder = prop.Name.ToUpperFirstChar() + "RequestBuilder";
    
        if(prop.IsCollection())
        {
            var collectionRequestBuilder = prop.Name.ToUpperFirstChar() + "CollectionRequestBuilder";
#>

    @property
    def <#=propName#>(self):
        """
        The <#=propName#> for the <#=entityBuilder#>
        :returns: A request builder created from the <#=entityBuilder#>
        :rtype: <#=collectionRequestBuilder#>
        """
        return <#=collectionRequestBuilder#>(self.append_to_request_url("<#=prop.Name#>"), self.client)
<#
        }
        else
        {
#>

    @property
    def <#=propName#>(self):
        """
        The <#=propName#> for the <#=entityBuilder#>
        :returns: A request builder created from the <#=entityBuilder#>
        :rtype: <#=propRequestBuilder#>
        """
        return <#=propRequestBuilder#>(self.append_to_request_url("<#=prop.Name#>"), self.client)

<#
        }
    }
    foreach(var prop in entity.StreamProperties())
    {
        var propName = prop.Name.ToUnderscore();
        var propRequestBuilder = prop.Class.Name.ToUpperFirstChar()+prop.Name.ToUpperFirstChar()+"RequestBuilder";
#>

    @property
    def <#=propName#>(self):
        """
        The <#=propName#> for the <#=entityBuilder#>
        :returns: A request builder created from the <#=entityBuilder#>
        :rtype: <#=propRequestBuilder#>
        """
        return <#=propRequestBuilder#>(self.append_to_request_url("<#=prop.Name#>"), self.client)
<#
    }
    foreach(var method in entity.Methods) {
        var methodName = method.Name.Substring(method.Name.IndexOf('.') + 1);
        var baseName = method.Class.Name.ToUpperFirstChar() + methodName.ToUpperFirstChar();

        var paramStringBuilder = new System.Text.StringBuilder();
        var builderInitializerBuilder = new System.Text.StringBuilder();

        paramStringBuilder.Append("self");

        builderInitializerBuilder.Append("self.append_to_request_url(\""+method.Name+"\"), ");
        builderInitializerBuilder.Append("self.client");

        if (method.Parameters != null && method.Parameters.Any()){
            foreach (var param in method.Parameters.Where(p => !p.IsNullable)){
                paramStringBuilder.Append(", " + param.Name.ToUnderscore());
                builderInitializerBuilder.Append(", " + param.Name.ToUnderscore());
            }
            foreach (var param in method.Parameters.Where(p => p.IsNullable)){
                paramStringBuilder.Append(", " + param.Name.ToUnderscore()+"=None");
                builderInitializerBuilder.Append(", " + param.Name.ToUnderscore());
            }
        }
#>

    def <#=methodName.ToUnderscore()#>(<#=paramStringBuilder.ToString()#>):
        """
        Executes the <#=methodName#> method
<#
        if (method.Parameters != null && method.Parameters.Any()){
            foreach (var param in method.Parameters){
#>
        :param <#=param.Name.ToUnderscore()#>: The <#=param.Name.ToUnderscore()#> to use in the method request
        :type <#=param.Name.ToUnderscore()#>: <#=param.Type.GetTypeString()#>
<#
            }
        }
#>
        :returns: A <#=baseName#>RequestBuilder for the method
        :rtype: <#=baseName#>RequestBuilder
        """
        return <#=baseName#>RequestBuilder(<#=builderInitializerBuilder.ToString()#>)

<#
    }
foreach (var prop in entity.NavigationProperties()){
    var propCollection = prop.Name.ToUpperFirstChar() + "Collection";
    var propCollectionRequestBuilder = (propCollection + "RequestBuilder");
#>
from ..Requests.<#=propCollection.ToUnderscore()#> import <#=propCollectionRequestBuilder#>
<#
}
#>
