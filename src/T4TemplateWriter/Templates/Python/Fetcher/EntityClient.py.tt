<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
var entityName = writer.GetPrefix().ToUpperFirstChar()+"Client";
#>
<#=writer.WriteHeader()#>

<#
var containerProperties = model.EntityContainer.Properties;

foreach(var prop in containerProperties){
var builderName = prop.Name.ToUpperFirstChar()+"CollectionRequestBuilder";
#>
from ..requests.<#=(prop.Name+"Collection").ToUnderscore()#> import <#=builderName#>
<#
}
#>
import asyncio

class OneDriveClient(object):

    def __init__(self, base_url, auth_provider, http_provider, loop=None):
        """Initialize the :class:`OneDriveClient` to be
            used for all OneDrive API interactions
        
        Args:
            base_url (str): The OneDrive base url to use for API interactions
            auth_provider(:class:`AuthProviderBase<onedrivesdk.auth_provider_base.AuthProviderBase>`):
                The authentication provider used by the client to auth
                with OneDrive services
            http_provider(:class:`HttpProviderBase<onedrivesdk.http_provider_base.HttpProviderBase>`):
                The HTTP provider used by the client to send all 
                requests to OneDrive
            loop (BaseEventLoop): Default to None, the AsyncIO loop 
                to use for all async requests
        """
        self.base_url = base_url
        self.auth_provider = auth_provider
        self.http_provider = http_provider
        self._loop = loop if loop else asyncio.get_event_loop()

    @property
    def auth_provider(self):
        """Gets and sets the client auth provider
        
        Returns:
            :class:`AuthProviderBase<onedrivesdk.auth_provider_base.AuthProviderBase>`: 
            The authentication provider
        """
        return self._auth_provider

    @auth_provider.setter
    def auth_provider(self, value):
        self._auth_provider = value

    @property
    def http_provider(self):
        """Gets and sets the client HTTP provider

        Returns: 
            :class:`HttpProviderBase<onedrivesdk.http_provider_base.HttpProviderBase>`: 
                The HTTP provider
        """
        return self._http_provider

    @http_provider.setter
    def http_provider(self, value):
        self._http_provider = value

    @property
    def base_url(self):
        """Gets and sets the base URL used by the client to make requests

        Returns:
            str: The base URL
        """
        return self._base_url

    @base_url.setter
    def base_url(self, value):
        self._base_url = value
<#
foreach(var prop in containerProperties){
    if (prop.IsCollection()){
        var collectionBuilder = (prop.Name.ToUpperFirstChar()+"CollectionRequestBuilder").ToUpperFirstChar();
#>

    @property
    def <#=prop.Name.ToUnderscore()#>(self):
        """Get the <#=(prop.Name.ToUpperFirstChar()+"CollectionRequestBuilder").ToUpperFirstChar()#> for constructing requests
        
        Returns:
            :class:`<#=collectionBuilder#><onedrivesdk.requests.<#=collectionBuilder.Replace("RequestBuilder","").ToUnderscore()#>.<#=collectionBuilder#>>`:
                The <#=collectionBuilder#> to return
        """
        return <#=(prop.Name.ToUpperFirstChar()+"CollectionRequestBuilder").ToUpperFirstChar()#>(self.base_url + "<#=prop.Name#>", self)
<#
    } else {
        var requestBuilder = (prop.Type.GetTypeString().ToUpperFirstChar()+"RequestBuilder").ToUpperFirstChar();
#>
    
    @property
    def <#=prop.Name.ToUnderscore()#>(self):
        """Get the <#=requestBuilder#> for constructing requests

        Returns: 
            :class:`<#=requestBuilder#><onedrivesdk.requests.<#=requestBuilder.ToUnderscore()#>.<#=requestBuilder#>>`:
                The <#=requestBuilder#> to return    
        """
        return <#=(prop.Type.GetTypeString()+"RequestBuilder").ToUpperFirstChar()#>(self.base_url + "<#=prop.Name#>", self)
<#
    }
}
#>