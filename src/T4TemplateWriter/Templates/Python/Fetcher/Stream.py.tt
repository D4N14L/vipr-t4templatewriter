<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel model         = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
var prop                = host.CurrentType as OdcmProperty;
var type                = prop.Class as OdcmType;
var propName            = prop.Name;
var propClass           = prop.Class.Name.ToUpperFirstChar();
var propRequest         = propClass + prop.Name.ToUpperFirstChar() + "Request";
var propRequestBuilder  = propClass + prop.Name.ToUpperFirstChar() + "RequestBuilder";
TemplateWriterSettings settings = ConfigurationService.Settings;
#>
<#=writer.WriteHeader()#>

import asyncio
import json
from ..request_base import RequestBase
from ..request_builder_base import RequestBuilderBase
from ..models.<#=propClass.ToUnderscore()#> import <#=propClass#>

class <#=propRequest#>(RequestBase):
    def __init__(self, request_url, client, options):
        """
        Initialize the <#=propRequest#>
        :param request_url: The request URL to initialize the <#=propRequest#> at
        :type request_url: str
        :param client: The client to use for requests
        :type client: OneDriveClient
        :param options: A list of options to pass into the request
        :type options: List of type Option
        """
        super(<#=propRequest#>, self).__init__(request_url, client, options)

<#
    if (!type.IsNavigable) {
#>
    def upload(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """
        Uploads the file using PUT
        :param <#=prop.Name.ToUnderscore()#>_local_path: The path to the local file to upload.
        :type <#=prop.Name.ToUnderscore()#>_local_path: str
        :returns: The created <#=propClass#>.
        :rtype: <#=propClass#>
        """
        self.method = "PUT"
        entity_response = self.send(path=<#=prop.Name.ToUnderscore()#>_local_path)
        entity = <#=propClass#>(json.loads(entity_response.content))
        return entity

    @asyncio.coroutine
    def upload_async(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """
        Uploads the file using PUT in async
        :param <#=prop.Name.ToUnderscore()#>_local_path: The path to the local file to upload.
        :type <#=prop.Name.ToUnderscore()#>_local_path: str
        :returns: The created <#=propClass#>.
        :rtype: <#=propClass#>
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.put,
                                                    <#=prop.Name.ToUnderscore()#>_local_path)
        entity = yield from future
        return entity

<#
    }
#>
    def download(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """
        Downloads the specified <#=propClass#>.
        :param <#=prop.Name.ToUnderscore()#>_local_path: The path where the <#=propClass#> should be downloaded to
        :type <#=prop.Name.ToUnderscore()#>_local_path: str
        """
        self.download_item(<#=prop.Name.ToUnderscore()#>_local_path)

    @asyncio.coroutine
    def download_async(self, <#=prop.Name.ToUnderscore()#>_local_path):
        """
        Downloads the specified <#=propClass#> in async.
        :param <#=prop.Name.ToUnderscore()#>_local_path: The path where the <#=propClass#> should be downloaded to
        :type <#=prop.Name.ToUnderscore()#>_local_path: str
        """
        future = self._client._loop.run_in_executor(None,
                                                    self.download,
                                                    <#=prop.Name.ToUnderscore()#>_local_path)
        yield from future

class <#=propRequestBuilder#>(RequestBuilderBase):

    def __init__(self, request_url, client):
        """
        Initialize the <#=propRequestBuilder#>
        :param request_url: The request URL to initialize the <#=propRequestBuilder#> at
        :type request_url: str
        :param client: The client to use for requests made by the <#=propRequestBuilder#>
        :type client: OneDriveClient
        """
        super(<#=propRequestBuilder#>, self).__init__(request_url, client)

    def request(self):
        return <#=propRequest#>(self._request_url, self._client, None)