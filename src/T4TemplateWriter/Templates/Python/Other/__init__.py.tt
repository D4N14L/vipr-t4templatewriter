<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ output extension="\\" #>
<#
CustomT4Host host       = (CustomT4Host) Host;
OdcmModel CurrentModel  = host.CurrentModel;
CodeWriterPython writer = (CodeWriterPython) host.CodeWriter;
#>
<#=writer.WriteHeader()#>

<#
//Enum
var enumTypes = CurrentModel.GetEnumTypes();
foreach(var enumType in enumTypes) {
#>
from .Models.<#=enumType.GetTypeString().ToUnderscore()#> import <#=enumType.GetTypeString().ToUpperFirstChar()#>
<#
}

//Complex
var complexTypes = CurrentModel.GetComplexTypes();
var complexNavigableTypes = CurrentModel.GetComplexTypes().WhereIsNavigable();

//remove the navigable types, as they will be taken care of in entities
complexTypes = complexTypes.Where(t => !complexNavigableTypes.Any(c => c.GetTypeString() == t.GetTypeString()));

foreach (var complex in complexTypes){
#>
from .Models.<#=complex.GetTypeString().ToUnderscore()#> import <#=complex.GetTypeString().ToUpperFirstChar()#>
<#
}

//Entities
var types = CurrentModel.GetEntityTypes();
types = types.Union(complexNavigableTypes);

foreach(var entity in types) {
#>
from .Models.<#=entity.GetTypeString().ToUnderscore()#> import <#=entity.GetTypeString().ToUpperFirstChar()#>
<#
}

//Requests and Request Builders
foreach(var entity in types) {
var name = entity.GetTypeString()+"Request";
#>
from .Requests.<#=name.ToUnderscore()#> import <#=name.ToUpperFirstChar()#>
from .Requests.<#=(name+"Builder").ToUnderscore()#> import <#=(name+"Builder").ToUpperFirstChar()#>
<#
}

//Collections
var collections = CurrentModel.GetEntityTypes().
    SelectMany(et => et.Properties).
    Where(prop => prop.IsCollection && prop.Type != null && prop.Type.Name != "String");

var containerEntitySets = CurrentModel.EntityContainer.Properties;
containerEntitySets.ForEach(set => set.IsCollection = true);

collections = collections.Union(containerEntitySets);
foreach(var collection in collections){
var prop = collection as OdcmProperty;
var collectionRequest = prop.Name.ToUpperFirstChar() + "CollectionRequest";
var collectionRequestBuilder = prop.Name.ToUpperFirstChar() + "CollectionRequestBuilder";
var collectionPage = prop.Name.ToUpperFirstChar() + "CollectionPage";
var collectionResponse = prop.Name.ToUpperFirstChar() + "CollectionResponse";
#>
from .Requests.<#=(prop.Name+"Collection").ToUnderscore()#> import <#=collectionRequest#>, <#=collectionRequestBuilder#>, <#=collectionPage#>, <#=collectionResponse#>
<#
}

//Methods
var methods = CurrentModel.GetEntityTypes().SelectMany(et => et.Methods);
foreach(var m in methods){
var method = m as OdcmMethod;
var name = method.Class.Name.ToUpperFirstChar() + method.Name.Substring(method.Name.IndexOf('.') + 1).ToUpperFirstChar();
#>
from .Requests.<#=name.ToUnderscore()#> import <#=name+"Request"#>
<#
}

//Streams
var properties = CurrentModel.GetEntityTypes()
                             .SelectMany(et => et.Properties)
                             .Where(prop => prop.IsStream);

var complexStreamProperties = CurrentModel.GetComplexTypes()
                                          .SelectMany(ct => ct.Properties)
                                          .Where(prop => prop.IsStream);

properties = properties.Union(complexStreamProperties);

foreach(var p in properties){
var prop = p as OdcmProperty;
var name = prop.Class.Name.ToUpperFirstChar() + prop.Name.ToUpperFirstChar();
#>
from .Requests.<#=name.ToUnderscore()#> import <#=name#>Request, <#=name#>RequestBuilder
<#
}

//Client
var container = CurrentModel.EntityContainer;
if (container != null){
#>
from .Requests.one_drive_client import OneDriveClient
<#
}
#>
from .auth_provider import AuthProvider
from .http_provider import HttpProvider
from .Extensions import *

def get_default_client(client_id, scopes):

    http_provider = HttpProvider()
    auth_provider = AuthProvider(http_provider=http_provider,
                                 client_id=client_id,
                                 scopes=scopes)
    return OneDriveClient("https://api.onedrive.com/v1.0/", auth_provider, http_provider)
